from aiogram import types, executor, Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text

from config import TOKEN_API
from sqlite import db_start, create_car, edit_profile, create_profile


async def on_startup(_):
    await db_start()  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ


storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot,
                storage=storage)


class CarStatesGroup(StatesGroup):

    brand = State()
    year = State()
    name = State()
    phone = State()


def get_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/start'))

    return kb


def get_ikb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='üöó', callback_data='car_start')
    kb.add(button)
    return kb


def get_phone_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(
        '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π —Å–æ—Ç–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –±–æ—Ç—É ‚òéÔ∏è', request_contact=True))

    return kb


def get_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/cancel'))

    return kb


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏!',
                        reply_markup=get_kb())


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message) -> None:
    await create_profile(user_id=message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã  –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–∞—à–∏–Ω—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üöó',
                         reply_markup=get_ikb())


@dp.message_handler(commands=['userid'])
async def cmd_userid(message: types.Message) -> None:
    await message.answer(f'{message.from_user.id}',
                         reply_markup=get_kb())


@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == 'car_start':
        await bot.send_message(callback.from_user.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –º–∞—à–∏–Ω—É! –î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã",
                               reply_markup=get_cancel_kb())
        await CarStatesGroup.brand.set()  # —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä–∫–∏


@dp.message_handler(lambda message: message.text.isdigit(), state=CarStatesGroup.brand)
async def check_brand(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ –º–∞—Ä–∫–∞ –º–∞—à–∏–Ω—ã!')


@dp.message_handler(content_types=['text'], state=CarStatesGroup.brand)
async def load_brand(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['brand'] = message.text

    await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–≥–æ –≥–æ–¥–∞ –º–∞—à–∏–Ω—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å')
    await CarStatesGroup.next()


@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) < 1950, state=CarStatesGroup.year)
async def check_year(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥!')


@dp.message_handler(state=CarStatesGroup.year)
async def load_year(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['year'] = message.text

    await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è')
    await CarStatesGroup.next()


@dp.message_handler(state=CarStatesGroup.name)
async def load_name(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text

    # keyboard = types.ReplyKeyboardMarkup(
    #     resize_keyboard=True, one_time_keyboard=True)
    # keyboard.add(types.KeyboardButton(
    #     text="Send my number to bot ‚òéÔ∏è", request_contact=True))
    await message.reply('–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º', reply_markup=get_phone_kb())
    await CarStatesGroup.next()


@ dp.message_handler(state=CarStatesGroup.phone, content_types=types.ContentTypes.CONTACT)
async def load_phone(message: types.Message, state: FSMContext):
    user_telephone_num = message.contact.phone_number
    async with state.proxy() as data:
        data['phone'] = user_telephone_num
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-—é–∑–µ—Ä—É
        await bot.send_message(chat_id=679553167, text=f"{data['brand']}, {data['year']}\n{data['name']}, {data['phone']}")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    await create_car(user_id=message.from_user.id, state=state)
    await message.answer('–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!', reply_markup=get_kb())
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    await edit_profile(state, user_id=message.from_user.id)
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)
